<invite-codes-page>
<div class="container padding-0">
    <div class="row">
        <div if={state.am_i_admin} class="column">
            <h4>Invite code list</h4>
            <p><a href="{state.baseUrl}/create_invite_code">Create new invite code</a></p>
            <div class="container">
                <div each={item in state.invites} class="row">
                    <div class="column">
                        <span>{item.invite_code} ({item.one_use ? "one use code" : "permanent code"})</span>
                    </div>
                    <div class="column">
                        <button onclick={() => deleteInviteCode(item.id)} class="button">Delete invite code "{item.invite_code}"</button>
                    </div>
                </div>
            </div>
        </div>
        <div if={!state.am_i_admin} class="column">
            <p>Access denied. <a href="/">Back to main page</a>.</p>
        </div>
    </div>
</div>
<script lang="js">
    import ApiHelper from '../api-helper.js';

    let state = {
        baseUrl: ApiHelper.apiBaseUrl(),
        invites: new Array(),
        timer: null,
        am_i_admin : false
    };

    let props = null;

    async function loadInvites() {
         try {
            if (this.state.am_i_admin === false) { return; }
            let resp_json = await ApiHelper.getInviteCodes();
            if (resp_json.status == 'OK') {
                this.state.invites = resp_json.body;
                this.update();
            }
        } catch (error) {
            console.log('Error while request: ', error.message);
        }
    }

    async function fetchInvitesData() {
        let resp_json = await ApiHelper.amIAdmin();
        if (resp_json.status == 'OK') {
            this.state.am_i_admin = resp_json.body;
            this.update();
        }
        await this.loadInvites();
    }

    async function deleteInviteCode(id) {
        await ApiHelper.deleteInviteCode(id);
    }

    export default {state, props,
        
        async onMounted(props, state) {
            const INVITES_UPDATE_INTERVAL = 5000;
            await this.fetchInvitesData();
            if (this.state.am_i_admin == false) { return; }
            this.state.timer = setInterval(async () => {await this.fetchInvitesData();}, INVITES_UPDATE_INTERVAL);
        },

        async onBeforeUnmount(props, state) {
            if (this.state.timer != null) {
                clearInterval(this.state.timer);
            }
        },

        loadInvites, fetchInvitesData, deleteInviteCode
    };
</script>
</invite-codes-page>